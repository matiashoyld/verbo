generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id
  email         String      @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  role          UserRole     @default(RECRUITER)
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  challenges    Challenge[]  @relation("CreatedChallenges")
  submissions   Submission[]

  @@map("users")
}

model Category {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  skills     Skill[]

  @@map("categories")
}

model Skill {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  categoryId String      @map("category_id") @db.Uuid
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  category   Category    @relation(fields: [categoryId], references: [id])
  subSkills  SubSkill[]
  challenges Challenge[] @relation("ChallengeToSkill")

  @@unique([categoryId, name])
  @@map("skills")
}

model SubSkill {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  skillId    String      @map("skill_id") @db.Uuid
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  criteria   Criterion[]
  skill      Skill       @relation(fields: [skillId], references: [id])

  @@unique([skillId, name])
  @@map("sub_skills")
}

model Criterion {
  id          String   @id @default(uuid()) @db.Uuid
  description String
  subSkillId  String   @map("sub_skill_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  subSkill    SubSkill @relation(fields: [subSkillId], references: [id])

  @@map("criteria")
}

model Challenge {
  id           String       @id @default(uuid()) @db.Uuid
  title        String
  description  String
  instructions String
  timeLimit    Int?        @map("time_limit")
  creatorId    String      @map("creator_id")
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy    User        @relation("CreatedChallenges", fields: [creatorId], references: [id])
  submissions  Submission[]
  skills       Skill[]     @relation("ChallengeToSkill")

  @@map("challenges")
}

model Submission {
  id          String           @id @default(uuid()) @db.Uuid
  challengeId String           @map("challenge_id") @db.Uuid
  candidateId String           @map("candidate_id")
  audioUrl    String?         @map("audio_url")
  screenUrl   String?         @map("screen_url")
  transcript  String?
  feedback    Json?
  status      SubmissionStatus @default(IN_PROGRESS)
  startedAt   DateTime         @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt DateTime?        @map("completed_at") @db.Timestamptz(6)
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  candidate   User             @relation(fields: [candidateId], references: [id])
  challenge   Challenge        @relation(fields: [challengeId], references: [id])

  @@map("submissions")
}

enum UserRole {
  RECRUITER
  CANDIDATE
}

enum SubmissionStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}
