generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  role        UserRole     @default(CANDIDATE)
  imageUrl    String?      @map("image_url")
  challenges  Challenge[]  @relation("CreatedChallenges")
  positions   Position[]
  submissions Submission[]

  @@map("User")
}

model Category {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  numId      Int?     @unique @map("num_id")
  skills     Skill[]

  @@map("Category")
}

model Skill {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  categoryId   String       @map("category_id") @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @updatedAt @db.Timestamptz(6)
  numId        Int?         @unique @map("num_id")
  competencies Competency[]
  category     Category     @relation(fields: [categoryId], references: [id])
  challenges   Challenge[]  @relation("ChallengeToSkill")

  @@unique([categoryId, name])
  @@map("Skill")
}

model Competency {
  id                     String               @id @default(uuid()) @db.Uuid
  name                   String
  skillId                String               @map("skill_id") @db.Uuid
  created_at             DateTime             @default(now()) @db.Timestamptz(6)
  updated_at             DateTime             @updatedAt @db.Timestamptz(6)
  numId                  Int?                 @unique @map("num_id")
  level_1_inadequate     String?              @map("level_1_inadequate")
  level_2_needs_guidance String?              @map("level_2_needs_guidance")
  level_3_competent      String?              @map("level_3_competent")
  level_4_proficient     String?              @map("level_4_proficient")
  level_5_exceptional    String?              @map("level_5_exceptional")
  skill                  Skill                @relation(fields: [skillId], references: [id])
  criteria               Criterion[]
  questionRelations      QuestionCompetency[]

  @@unique([skillId, name])
  @@map("Competency")
}

model Criterion {
  id           String     @id @default(uuid()) @db.Uuid
  description  String
  competencyId String     @map("competency_id") @db.Uuid
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime   @updatedAt @db.Timestamptz(6)
  competency   Competency @relation(fields: [competencyId], references: [id])

  @@map("Criterion")
}

model Challenge {
  id           String   @id @default(uuid()) @db.Uuid
  title        String
  description  String
  instructions String
  timeLimit    Int?     @map("time_limit")
  creatorId    String   @map("creator_id")
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @updatedAt @db.Timestamptz(6)
  createdBy    User     @relation("CreatedChallenges", fields: [creatorId], references: [id])
  skills       Skill[]  @relation("ChallengeToSkill")

  @@map("Challenge")
}

model Submission {
  id          String               @id @default(uuid()) @db.Uuid
  candidateId String               @map("candidate_id")
  status      SubmissionStatus     @default(IN_PROGRESS)
  startedAt   DateTime             @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt DateTime?            @map("completed_at") @db.Timestamptz(6)
  created_at  DateTime             @default(now()) @db.Timestamptz(6)
  updated_at  DateTime             @updatedAt @db.Timestamptz(6)
  positionId  String               @map("position_id") @db.Uuid
  candidate   User                 @relation(fields: [candidateId], references: [id])
  position    Position             @relation(fields: [positionId], references: [id])
  questions   SubmissionQuestion[]

  @@map("Submission")
}

model CommonPosition {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @unique
  icon        String
  description String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)

  @@map("CommonPosition")
}

model Position {
  id             String             @id @default(uuid()) @db.Uuid
  title          String
  jobDescription String
  context        String?
  openings       Int                @default(1)
  creatorId      String             @map("creator_id")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator        User               @relation(fields: [creatorId], references: [id])
  questions      PositionQuestion[]
  submissions    Submission[]

  @@map("Position")
}

model PositionQuestion {
  id           String               @id @default(uuid()) @db.Uuid
  positionId   String               @map("position_id") @db.Uuid
  question     String
  context      String?
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  position     Position             @relation(fields: [positionId], references: [id], onDelete: Cascade)
  competencies QuestionCompetency[]
  submissions  SubmissionQuestion[]

  @@map("PositionQuestion")
}

model QuestionCompetency {
  id                        String                       @id @default(uuid()) @db.Uuid
  questionId                String                       @map("question_id") @db.Uuid
  competencyId              String                       @map("competency_id") @db.Uuid
  createdAt                 DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime                     @updatedAt @map("updated_at") @db.Timestamptz(6)
  competency                Competency                   @relation(fields: [competencyId], references: [id])
  question                  PositionQuestion             @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submissionCompetencyAssessments SubmissionQuestionCompetency[]

  @@unique([questionId, competencyId])
  @@map("QuestionCompetency")
}

model RecordingMetadata {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  candidateId          String
  questionId           String
  filePath             String
  fileSize             Int?
  durationSeconds      Int?
  processed            Boolean            @default(false)
  submissionQuestionId String             @unique @map("submission_question_id") @db.Uuid
  positionId           String             @db.Uuid
  submissionQuestion   SubmissionQuestion @relation(fields: [submissionQuestionId], references: [id], onDelete: Cascade)

  @@map("RecordingMetadata")
}

model SubmissionQuestion {
  id                   String                       @id @default(uuid()) @db.Uuid
  submissionId         String                       @map("submission_id") @db.Uuid
  positionQuestionId   String                       @map("position_question_id") @db.Uuid
  overall_assessment   String?
  createdAt            DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime                     @updatedAt @map("updated_at") @db.Timestamptz(6)
  skills_demonstrated  String[]
  strengths            String[]
  areas_of_improvement String[]
  recordingMetadata    RecordingMetadata?
  positionQuestion     PositionQuestion             @relation(fields: [positionQuestionId], references: [id], onDelete: Cascade)
  submission           Submission                   @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  competencyAssessments SubmissionQuestionCompetency[]

  @@unique([submissionId, positionQuestionId])
  @@map("SubmissionQuestion")
}

model SubmissionQuestionCompetency {
  id                   String             @id @default(uuid()) @db.Uuid
  submissionQuestionId String             @map("submission_question_id") @db.Uuid
  questionCompetencyId String             @map("question_competency_id") @db.Uuid
  level                Int                @db.Integer
  rationale            String
  createdAt            DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  submissionQuestion   SubmissionQuestion @relation(fields: [submissionQuestionId], references: [id], onDelete: Cascade)
  questionCompetency   QuestionCompetency @relation(fields: [questionCompetencyId], references: [id], onDelete: Cascade)

  @@unique([submissionQuestionId, questionCompetencyId])
  @@map("SubmissionQuestionCompetency")
}

enum UserRole {
  RECRUITER
  CANDIDATE
}

enum SubmissionStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}
