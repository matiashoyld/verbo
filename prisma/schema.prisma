generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  role        UserRole     @default(RECRUITER)
  imageUrl    String?      @map("image_url")
  challenges  Challenge[]  @relation("CreatedChallenges")
  positions   Position[]
  submissions Submission[]

  @@map("User")
}

model Category {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  numId      Int?     @unique @map("num_id")
  skills     Skill[]

  @@map("Category")
}

model Skill {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  categoryId   String       @map("category_id") @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @updatedAt @db.Timestamptz(6)
  numId        Int?         @unique @map("num_id")
  competencies Competency[]
  category     Category     @relation(fields: [categoryId], references: [id])
  challenges   Challenge[]  @relation("ChallengeToSkill")

  @@unique([categoryId, name])
  @@map("Skill")
}

model Competency {
  id                String               @id @default(uuid()) @db.Uuid
  name              String
  skillId           String               @map("skill_id") @db.Uuid
  created_at        DateTime             @default(now()) @db.Timestamptz(6)
  updated_at        DateTime             @updatedAt @db.Timestamptz(6)
  numId             Int?                 @unique @map("num_id")
  skill             Skill                @relation(fields: [skillId], references: [id])
  criteria          Criterion[]
  questionRelations QuestionCompetency[]

  @@unique([skillId, name])
  @@map("Competency")
}

model Criterion {
  id           String     @id @default(uuid()) @db.Uuid
  description  String
  competencyId String     @map("competency_id") @db.Uuid
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime   @updatedAt @db.Timestamptz(6)
  competency   Competency @relation(fields: [competencyId], references: [id])

  @@map("Criterion")
}

model Challenge {
  id           String       @id @default(uuid()) @db.Uuid
  title        String
  description  String
  instructions String
  timeLimit    Int?         @map("time_limit")
  creatorId    String       @map("creator_id")
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @updatedAt @db.Timestamptz(6)
  createdBy    User         @relation("CreatedChallenges", fields: [creatorId], references: [id])
  submissions  Submission[]
  skills       Skill[]      @relation("ChallengeToSkill")

  @@map("Challenge")
}

model Submission {
  id          String           @id @default(uuid()) @db.Uuid
  challengeId String           @map("challenge_id") @db.Uuid
  candidateId String           @map("candidate_id")
  audioUrl    String?          @map("audio_url")
  screenUrl   String?          @map("screen_url")
  transcript  String?
  feedback    Json?
  status      SubmissionStatus @default(IN_PROGRESS)
  startedAt   DateTime         @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt DateTime?        @map("completed_at") @db.Timestamptz(6)
  created_at  DateTime         @default(now()) @db.Timestamptz(6)
  updated_at  DateTime         @updatedAt @db.Timestamptz(6)
  candidate   User             @relation(fields: [candidateId], references: [id])
  challenge   Challenge        @relation(fields: [challengeId], references: [id])

  @@map("Submission")
}

model CommonPosition {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @unique
  icon        String
  description String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)

  @@map("CommonPosition")
}

model Position {
  id             String             @id @default(uuid()) @db.Uuid
  title          String
  jobDescription String
  context        String?
  openings       Int                @default(1)
  creatorId      String             @map("creator_id")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator        User               @relation(fields: [creatorId], references: [id])
  questions      PositionQuestion[]

  @@map("Position")
}

model PositionQuestion {
  id           String               @id @default(uuid()) @db.Uuid
  positionId   String               @map("position_id") @db.Uuid
  question     String
  context      String?
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  position     Position             @relation(fields: [positionId], references: [id], onDelete: Cascade)
  competencies QuestionCompetency[]

  @@map("PositionQuestion")
}

model QuestionCompetency {
  id           String           @id @default(uuid()) @db.Uuid
  questionId   String           @map("question_id") @db.Uuid
  competencyId String           @map("competency_id") @db.Uuid
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  competency   Competency       @relation(fields: [competencyId], references: [id])
  question     PositionQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, competencyId])
  @@map("QuestionCompetency")
}

model RecordingMetadata {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  candidateId     String
  positionId      String
  questionId      String
  filePath        String
  fileSize        Int?
  durationSeconds Float?
  processed       Boolean  @default(false)

  @@index([candidateId, positionId])
  @@index([questionId])
}

enum UserRole {
  RECRUITER
  CANDIDATE
}

enum SubmissionStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}
