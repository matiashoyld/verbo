generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  role        UserRole     @default(RECRUITER)
  imageUrl    String?      @map("image_url")
  challenges  Challenge[]  @relation("CreatedChallenges")
  submissions Submission[]
  positions   Position[]

  @@map("User")
}

model Category {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  skills     Skill[]

  @@map("Category")
}

model Skill {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  categoryId String      @map("category_id") @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  updated_at DateTime    @updatedAt @db.Timestamptz(6)
  category   Category    @relation(fields: [categoryId], references: [id])
  subSkills  SubSkill[]
  challenges Challenge[] @relation("ChallengeToSkill")

  @@unique([categoryId, name])
  @@map("Skill")
}

model SubSkill {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  skillId    String      @map("skill_id") @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  updated_at DateTime    @updatedAt @db.Timestamptz(6)
  criteria   Criterion[]
  skill      Skill       @relation(fields: [skillId], references: [id])

  @@unique([skillId, name])
  @@map("SubSkill")
}

model Criterion {
  id          String   @id @default(uuid()) @db.Uuid
  description String
  subSkillId  String   @map("sub_skill_id") @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)
  subSkill    SubSkill @relation(fields: [subSkillId], references: [id])

  @@map("Criterion")
}

model Challenge {
  id           String       @id @default(uuid()) @db.Uuid
  title        String
  description  String
  instructions String
  timeLimit    Int?         @map("time_limit")
  creatorId    String       @map("creator_id")
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @updatedAt @db.Timestamptz(6)
  createdBy    User         @relation("CreatedChallenges", fields: [creatorId], references: [id])
  submissions  Submission[]
  skills       Skill[]      @relation("ChallengeToSkill")

  @@map("Challenge")
}

model Submission {
  id          String           @id @default(uuid()) @db.Uuid
  challengeId String           @map("challenge_id") @db.Uuid
  candidateId String           @map("candidate_id")
  audioUrl    String?          @map("audio_url")
  screenUrl   String?          @map("screen_url")
  transcript  String?
  feedback    Json?
  status      SubmissionStatus @default(IN_PROGRESS)
  startedAt   DateTime         @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt DateTime?        @map("completed_at") @db.Timestamptz(6)
  created_at  DateTime         @default(now()) @db.Timestamptz(6)
  updated_at  DateTime         @updatedAt @db.Timestamptz(6)
  candidate   User             @relation(fields: [candidateId], references: [id])
  challenge   Challenge        @relation(fields: [challengeId], references: [id])

  @@map("Submission")
}

enum UserRole {
  RECRUITER
  CANDIDATE
}

enum SubmissionStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model CommonPosition {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @unique
  icon        String
  description String   @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)

  @@map("CommonPosition")
}

model Position {
  id             String            @id @default(uuid()) @db.Uuid
  title          String
  department     String
  jobDescription String            @db.Text
  context        String?           @db.Text
  status         PositionStatus    @default(DRAFT)
  openings       Int               @default(1)
  creatorId      String            @map("creator_id")
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator        User              @relation(fields: [creatorId], references: [id])
  skills         PositionSkill[]
  questions      PositionQuestion[]

  @@map("Position")
}

model PositionSkill {
  id           String   @id @default(uuid()) @db.Uuid
  positionId   String   @map("position_id") @db.Uuid
  categoryName String   @map("category_name")
  skillName    String   @map("skill_name")
  competencies String[] 
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  position     Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@map("PositionSkill")
}

model PositionQuestion {
  id             String   @id @default(uuid()) @db.Uuid
  positionId     String   @map("position_id") @db.Uuid
  question       String   @db.Text
  context        String?  @db.Text
  skillsAssessed Json     @map("skills_assessed")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  position       Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@map("PositionQuestion")
}

enum PositionStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}
